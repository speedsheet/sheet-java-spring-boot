# <#>Spring Boot<> SpeedSheet
<b>Find what you need, faster.<>


# Unsorted


## Add Spring.Help



# Summary



### What is it?

A Spring based framework for creating simple, portable, fast and flexible Java applications. It is a suite of pre-selected frameworks and technologies configured together to reduce boiler plate.



### Default - Servlet

Tomcat



# Application
@
@ Main Class, application-only


## Application Class - Sample

<cb>import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

\@SpringBootApplication
\@ComponentScan({"<v>com.application.package1...<>", <v>...<>})
public class <v>Application<> {
	
	public final static Logger logger = LogManager.getLogger(<v>Application<>.class);
	
	public static void main(String[] args) {
		
		SpringApplication.run(<v>Application<>.class, args);
		
		logger.info ("The app runs üëç");
	}
}<>
@
@ Basics



## Application - Details


### Application Class - Define

<cb>@SpringBootApplication<>

<cb>SpringApplication.run(<v>Application<>.class, args);<>

Full Example:

<cb>import org.springframework.boot.autoconfigure.SpringBootApplication;

\@SpringBootApplication
public class <v>Application<> {

	public static void main(String[] args) {
		
		SpringApplication.run(<v>Application<>.class, args);
	}
}
<>

Defines Spring startup class.
@
@ New, Create, Run, Startup
@ @SpringBootApplication, SpringApplication.run



### Application Class - Component Scan

<cb>@ComponentScan({<v>package1<>, <v>package2<>, <v>...<>})<>

Full Example:

<cb>import org.springframework.context.annotation.ComponentScan;

\@ComponentScan({"<v>com.application<><v>...<>", "<v>com.application<><v>...<>", <v>...<>})
public class <v>Application<> {
	<v>...<><>


Defines the packages Spring needs to scan to find Spring managed classes.

Default:
Spring Boot scans for classes in and under the @SpringBootApplication class package by default.
@
@ Components, @ComponentScan



# Configuration File
@
@ Settings



### Configuration Directory

Locations Searched:

	<c>/config<> in the Current Directory
	Current Directory
	<c>/config> in the Class Path
	Class Path Root Directory


From Project Root:

<cb>/config<>

In Class Path:

<cb>/src/main/resources<>


Spring Boot scans these directories looking for configuration files.
@
@ Seach, Directory, Path, Files, Folder



### Configuration Directory - Set - Command Line Parameter

Parameter:

<cb>spring.config.location<>

Command Line:

<cb>-Dspring.config.location=<v>config_directory_path<><>


Set from the command line.
@
@ spring.config.location
@ set, by location, folder



### Configuration Directory - Set - Environment Variable

<cb>SPRING_CONFIG_LOCATION<>

Bash:

<cb>export SPRING_CONFIG_LOCATION=<v>config_directory_path<><>
@
@ SPRING_CONFIG_LOCATION
@ set, by location, folder



### Configuration File Name

<cb>application.properties<>

Using Profile:

<cb>application-<v>profile<>.properties<>
@
@ application.properties



### Configuration File Name - YAML

<cb>application.yaml<>

Using Profile:

<cb>application-<v>profile<>.yaml<>



### Configuration File Location - Set - Command Line Parameter

Parameter:

<cb>spring.config.name<>

Command Line:

<cb>--spring.config.name=<v>config_file_path<><>

Or

<cb>-Dspring.config.name=<v>config_file_path<><>


Set from the command line.
@
@ Set, By



# Configuration Profiles



### Profiles - Get

<cb>@Autowired
ConfigurableEnvironment <v>environment<>;

<v>environment<>.getActiveProfiles();<>


Returns the currently active profiles.
@
@ .getActiveProfiles()



### Profile - Set - Command Line Parameter

Parameter:

<cb>spring.profiles.active<>

Command Line:

<cb>--spring.profiles.active=<v>profile-1<><>

<cb>--spring.profiles.active=<v>profile-1<>,<v>profile-2<>,<v>...<><>

Or

<cb>-Dspring.profiles.active=<v>profile-1<><>
@
@ spring.profiles.active



### Profile - Set - In applications.properties

Parameter:

<cb>spring.profiles.active<>

Set:

<cb>spring.profiles.active=<v>profile-1<><>

<cb>spring.profiles.active=<v>profile-1<>,<v>profile-2<>,<v>...<><>
@
@ applications.properties, spring.profiles.active



### Profile - Set - In Code

<cb>servletContext.setInitParameter("spring.profiles.active", "<v>profile-name<>");<>

Or

<cb>@Autowired
ConfigurableEnvironment <v>environment<>;

<v>environment<>.setActiveProfiles("<v>profile-name<>");<>
@
@ .setActiveProfiles(), ServletContext.setInitParameter()
@ Programmatically, through



### Profile - Set - With Environment Variable

<cb>SPRING_PROFILES_ACTIVE<>

Bash:

<cb>export SPRING_PROFILES_ACTIVE=<v>profile-name<><>



### Profile - Include Class On Profile

<cb>@Profile ("<v>profile-name<>")<>

<cb>@Profile ("<v>profile-name<> & <v>profile-2-name<>")<>

Import: <!>(confirm)<>

<cb>import org.springframework.context.annotation.Profile;<>


Executes class only when the given profile is active.


Example:

<cb><!>Example please<><>
@
@ Apply Active Profile, Enable



### Profile - Exclude Class On Profile

<cb>@Profile ("!<v>profile-name<>")<>

Import:

<cb>import org.springframework.context.annotation.Profile;<>


Executes class given profile is NOT active.


Example:

<cb><!>Example please<><>
@
@ Apply Active Profile, disable



# Configuration Properties
@
@ Settings



### Property - Get - In Code

<cb>@Inject
private Environment <v>environment<>;

String <v>propertyValue1<> = <v>environment<>.getProperty("<v>property-name<>");<>
@
@ Programmatically



### Property - Read - To Method Parameter

<cb>@Value("${<v>property-name<>}")<>

Import:

<cb>import org.springframework.beans.factory.annotation.Value;<>


Reads the value from the property file and assigns it to the argument.


Default:

	Throws: <c>java.lang.IllegalArgumentException<>


<cb>public void <v>method1<>(@Value("${<v>property-name<>}") String <v>parameter1<>) {
	<v>...<>
}<>
@
@ get



### Property - Read - To Variable

<cb>@Value("${<v>property-name<>}")<>

Import:

<cb>import org.springframework.beans.factory.annotation.Value;<>


Reads the value from the property file and assigns it to the variable.


Default:

	Throws: <c>java.lang.IllegalArgumentException<>


<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>}")
	String <v>property1<>
}<>
@
@ get



### Property - Read - Default Value

<cb>@Value("${<v>property-name<>:<v>default-value<>}")<>

Import:

<cb>import org.springframework.beans.factory.annotation.Value;<>

Boolean:

<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:<v>true<>}")
	Boolean <v>property1<>
}<>

Integer:

<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:<v>123<>}")
	int <v>property1<>
}<>

String:

<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:}")			<#>// 1.<>
	String <v>property1<>
}<>

<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:<v>string<>}")	<#>// 2.<>
	String <v>property1<>
}<>

1.  -  Defaults to an empty string.

2.  -  Quotes are not needed
@
@ get, with


### Property - Read - Default Value - Boolean

<cb>@Value("${<v>property-name<>:true}")<>

<cb>@Value("${<v>property-name<>:false}")<>

Import:

<cb>import org.springframework.beans.factory.annotation.Value;<>


<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:true}")
	Boolean <v>property1<>;
}<>
@
@ get, with


### Property - Read - Default Value - Integer

<cb>@Value("${<v>property-name<>:#{<v>int-value<>}}")<>

<cb>@Value("${<v>property-name<>:#{<v>101<>}}")<>


<cb>public class <v>Class1<>{

	@Value("${<v>property-name<>:#{42}}")
	int <v>property1<>;
}<>
@
@ get, with



### Property - Set - In Code

<cb>servletContext.setInitParameter("<v>property-name<>, "<v>value<>");<>

<cb>@Autowired
ServletContext <v>servletContext<>;

<v>servletContext<>.setInitParameter("<v>property-name<>, "<v>value<>");<>
@
@ ServletContext.setInitParameter, programmatically, through




# Component Configuration
@
@ Beans, Components



## Autowire / Inject

<cb>@Inject<>

Full Usage:

<cb>import javax.inject.Inject;

\@Inject
<v>T<> <v>property<>;<>

Equivalent To:

<cb>import org.springframework.beans.factory.annotation.Autowired;

\@Autowired
<v>T<> <v>property<>;<>


<c>@Autowired<> vs <c>@Inject<>:

These are equivalent.
\@Autowired is Spring Boots internal annotation for autowiring components.
\@Inject is the Java standard way to autwire components.
@
@ @autowired, org.springframework.beans.factory.annotation.Autowired
@ @inject, javax.inject.Inject



## Explicit Configuration


## Inheritance / Qualifier

<cb>@Qualifier("<v>qualifier_name<>")<>

Full Usage:

<cb>import org.springframework.beans.factory.annotation.Qualifier;

<#>// Define:<>

\@Qualifier("<v>qualifier_name<>")
class <v>QualifiedClass<> implements <v>BaseClass<> {
	<v>...<>
}

<#>// Use:<>

class <v>Class1<> {

	@Inject
	@Qualifier("<v>qualifier_name<>")
	<v>BaseClass<> component;
}<>


Example:

<cb>import javax.inject.Inject;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    @Qualifier("<v>logged_service<>")
    <v>UserService<> <v>service<>;

    @GetMapping("{<v>id<>}")
    public ResponseEntity\<<v>User<>> retrieve(@PathVariable int <v>id<>) {
        <v>User<> <v>user<> = <v>...<>.retrieve(<v>id<>);
        return new ResponseEntity(<v>user<>, HttpStatus.OK);
    }
}<>
@
@ @qualifier, org.springframework.beans.factory.annotation.Qualifier



# Controller
@
@ cont-only, controller-only, controllers-only



### Controller - Web Controller - Define

<cb>@Controller<>

Full Usage:

<cb>import org.springframework.stereotype.Controller;

\@Controller
public class <v>Controller1<> {
	<v>...<>
}<>


Example:

<cb>import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;

\@Controller
\@RequestMapping("<v>/user<>")
public class <v>UserController<> {

    @GetMapping("/")
    public ResponseEntity\<String> health() {
        return new ResponseEntity(<v>"User: Joe Smith"<>, HttpStatus.OK);
    }
}<>
@
@ Create, New, url
@ @Controller, org.springframework.stereotype.Controller



### Controller - REST Controller - Define

<cb>@RestController<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.RestController;

\@RestController
public class <v>Controller1<> {
    <v>...<>
}<>


<c>@RestController<> is equivalent to <c>@Controller<> with <c>@ResponseBody<>.


Example:

<cb>import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @GetMapping("/")
    public ResponseEntity\<String> health() {
        return new ResponseEntity(<v>"User: Joe Smith"<>, HttpStatus.OK);
    }
}<>
@
@ Create, New, url
@ @RestController, org.springframework.web.bind.annotation.RestController;



### Controller - Map URL Path

<cb>@RequestMapping("<v>url_path<>")<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.RequestMapping;

\@RequestMapping("<v>url_path<>")
public class <v>Controller1<> {
    <v>...<>
}<><>


Defines the url path that will access the controller.


<cb>import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @GetMapping("/")
    public ResponseEntity\<String> health() {
        return new ResponseEntity(<v>"User: Joe Smith"<>, HttpStatus.OK);
    }
}<>
@
@ Create, New, url
@ @RequestMapping, org.springframework.web.bind.annotation.RequestMapping



### Controller - Controller Advice

<!>Details!<>



### Controller Action - Delete

<cb>@DeleteMapping()

\@DeleteMapping("<v>url_path<>")<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.DeleteMapping;

public class <v>Controller1<> {
    
    @DeleteMapping("<v>url_path<>")
    public ResponseEntitity\<Item> delete() {
        <v>...<>
    }
}<>


Triggers the delete method when the Delete HTTP action is sent.


<cb>import javax.inject.Inject;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    <v>UserService<> <v>service<>;

	@DeleteMapping("{<v>id<>}")
    public ResponseEntity\<String> delete(@PathVariable int <v>id<>) {
        <v>userService<>.delete(<v>id<>);
        return new ResponseEntity(<v>"User deleted."<>, HttpStatus.OK);
    }
}<>
@
@ command
@ @DeleteMapping, org.springframework.web.bind.annotation.DeleteMapping



### Controller Action - Get

<cb>@GetMapping()

\@GetMapping("<v>url_path<>")<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.GetMapping;

public class <v>Controller1<> {
    
    @GetMapping("<v>url_path<>")
    public ResponseEntitity\<<v>T<>> retrieve() {
        <v>...<>
    }
}<>


Examples:

<cb>import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;

\@RestController
\@RequestMapping("<v>/<>")
public class <v>ApplicationController<> {

    @GetMapping("<v>/health<>")
    public ResponseEntity\<String> health() {
        return new ResponseEntity\<>("The system is up üëç", HttpStatus.OK);
    }
}<>

<cb>import javax.inject.Inject;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    <v>UserService<> <v>service<>;

    @GetMapping("{<v>id<>}")
    public ResponseEntity\<<v>User<>> retrieve(@PathVariable int <v>id<>) {
        <v>User<> <v>user<> = <v>...<>.retrieve(<v>id<>);
        return new ResponseEntity(<v>user<>, HttpStatus.OK);
    }
}<>
@
@ Command
@ @GetMapping, org.springframework.web.bind.annotation.GetMapping



### Controller Action - Post

<cb>@PostMapping()

\@PostMapping("<v>url_path<>")<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.PostMapping;

public class <v>Controller1<> {

    @PostMapping("<v>url_path<>")
    public ResponseEntitity\<<v>T<>> update() {
        <v>...<>
    }
}<>


Example:

<cb>import javax.inject.Inject;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PostMapping;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    <v>UserService<> <v>service<>;

    @PostMapping("{<v>id<>}")
    public ResponseEntity\<<v>User<>> update(@RequestBody <v>User<> <v>user<>) {
        <v>User<> <v>updated<> = <v>service<>.update(<v>user<>);
        return new ResponseEntity(<v>updated<>, HttpStatus.OK);
    }
}<>
@
@ command
@ @PostMapping, org.springframework.web.bind.annotation.PostMapping



### Controller Action - Put

<cb>@PutMapping()

\@PutMapping("<v>url_path<>")<>

Full Usage:

<cb>import org.springframework.web.bind.annotation.PutMapping;

public class <v>Controller1<> {

    @PutMapping("<v>url_path<>")
    public ResponseEntitity\<<v>T<>> update() {
        <v>...<>
    }
}<>


Example:

<cb>import javax.inject.Inject;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PutMapping;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    <v>UserService<> <v>service<>;

    @PutMapping("{<v>id<>}")
    public ResponseEntity\<<v>User<>> update(@RequestBody <v>User<> <v>user<>) {
        <v>User<> <v>updated<> = <v>service<>.update(<v>user<>);
        return new ResponseEntity(<v>updated<>, HttpStatus.OK);
    }
}<>
@
@ command
@ @PutMapping, org.springframework.web.bind.annotation.PutMapping



### Controller Request - Body
@
@ input



### Controller Request - Body Parameter

<cb>@RequestBody <v>T<> <v>value<><>

Full Method:

<cb>import org.springframework.web.bind.annotation.RequestBody;

public ResponseEntity\<<v>...<>> <v>requestMethod<>(@RequestBody <v>T<> <v>value<>) {
	<v>...<>
}<>


Reads the body of the request and converts it into the type <c><v>T<><>.

The default format for the body is json.


Example:

<cb>import javax.inject.Inject;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PostMapping;

\@RestController
\@RequestMapping("<v>/api/user<>")
public class <v>UserApiController<> {

    @Inject
    <v>UserService<> <v>service<>;

    @PostMapping("{<v>id<>}")
    public ResponseEntity\<<v>User<>> update(@RequestBody <v>User<> <v>user<>) {
        <v>User<> <v>updated<> = <v>service<>.update(<v>user<>);
        return new ResponseEntity(<v>updated<>, HttpStatus.OK);
    }
}<>
@
@ post, put
@ @RequestBody, org.springframework.web.bind.annotation.RequestBody




### Controller Request - Header - Value

<cb>@RequestHeader(value = "<v>name<>") String <v>header<><>

Full:

<cb>import org.springframework.web.bind.annotation.RequestHeader;

public ResponseEntity\<<v>...<>> <v>request<>(@RequestHeader(value = "<v>name<>") String <v>header<>) {
    <v>...<>
}<>


Returns a single header.

Returns <c>null<> if not present.
@
@ @RequestHeader, org.springframework.web.bind.annotation.RequestHeader
@ input, get, by name, individual, headers



### Controller Request - Header - All Values

<cb>@RequestHeader Map\<String, String> <v>headers<><>

Full:

<cb>import org.springframework.web.bind.annotation.RequestHeader;

public ResponseEntity\<<v>...<>> <v>request<>(@RequestHeader Map\<String, String> <v>headers<>) {
    <v>...<>
}<>


Returns all header values.
@
@ @RequestHeader, org.springframework.web.bind.annotation.RequestHeader
@ input, get, headers



### Controller Request - Path Parameter

<cb>@PathVariable <v>T<> <v>name<>

\@PathVariable("<v>path_name<>") <v>T<> <v>name<><>

From URL:

<cb>http://.../<v>name<>/...<>

Full Method:

<cb>org.springframework.web.bind.annotation.PathVariable

\@<v>GetMapping<>("{<v>name<>}")
public ResponseEntity\<<v>...<>> <v>request<>(@PathVariable <v>T<> <v>name<>) {	<#>// #1<>
	<v>...<>
}<>

Explicitly Named Parameter:

<cb>org.springframework.web.bind.annotation.PathVariable

\@<v>GetMapping<>("{<v>path_name<>}")
public ResponseEntity\<<v>...<>> <v>request<>(@PathVariable("<v>path_name<>") <v>T<> <v>name<>) {	<#>// #1<>
	<v>...<>
}<>


Reads the named parameter from the path mapping.
Passes the value in to the variable of the same name.

\#1  <s>-<>  Sets the variable to the url path parameter of the same name.
@
@ variable, named parameter
@ @PathVariable, org.springframework.web.bind.annotation.PathVariable



### Controller Request - Url Parameter

<cb>@RequestParam <v>Type<> <v>name<><>

Usage:

<cb>import org.springframework.web.bind.annotation.RequestParam;

public ResponseEntity\<<v>...<>> <v>requestMethod<>(@RequestParam <v>Type<> <v>name<>) {
    <v>...<>
}<>

For URL:

<cb>http://site.com/page&<v>name<>=<v>value<><>


Returns the request parameter.

The parameter name is taken from the variable name. They must be the same.
See: <link# "Controller Request - Url Parameter - Named Parameter">Named Parameter<> for non-matching names.
@
@ input, get
@ @RequestParam, RequestParam, org.springframework.web.bind.annotation.RequestParam



### Controller Request - Url Parameter - Named Parameter

<cb>\@RequestParam(name = "<v>param_name<>") <v>T<> <v>name<><>

Usage:

<cb>import org.springframework.web.bind.annotation.RequestParam;

public ResponseEntity\<<v>...<>> <v>request<>(@RequestParam(name = "<v>param_name<>") <v>Type<> <v>name<>) {
    <v>...<>
}<>

For URL:

<cb>http://site.com/page&<v>param_name<>=<v>value<><>


Returns request parameter to a variable where the parameter and variable names are different.
@ input, get
@ \@RequestParam, RequestParam, org.springframework.web.bind.annotation.RequestParam
@ name=, mismatched name, non-matching



### Controller Request - Url Parameter - Optional

<cb>\@RequestParam(required = false) <v>T<> <v>name<><>

Usage:

<cb>import org.springframework.web.bind.annotation.RequestParam;

public ResponseEntity\<<v>...<>> <v>request<>(@RequestParam(request = false) <v>Type<> <v>name<>) {
    <v>...<>
}<>
@
@ input, get
@ \@RequestParam, org.springframework.web.bind.annotation.RequestParam
@ not required, required=false



### Controller Response - Headers - Set

<cb>HttpHeaders <v>headers<> = new HttpHeaders();
headers.set("<v>name<>", "<v>value<>");

<v>response<>.setHeaders(<v>headers<>);<>

Usage:

<cb>import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

public ResponseEntity<String> <v>request<>() {

    HttpHeaders headers = new HttpHeaders();
    headers.set("<v>name<>", "<v>value<>");

    ResponseEntity <v>response<> = ResponseEntity().ok().body(<v>...<>);
    <v>response<>.headers(<v>headers<>);
    return <v>response<>;
}<>



### Controller Response - Status Code

<cb>HttpStatus.<v>Status<><>

<cb>return new ResponseEntity\<>(<v>responseItem<>", HttpStatus.<v>Status<>)<>

Full Usage:

<cb>import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public ResponseEntity\<<v>Type<>> <v>controllerAction<>() {
	return new ResponseEntity\<>(<v>responseItem<>", HttpStatus.<v>Status<>);
}<>


Returns the http code for the given HttpStatus.


Example:

<cb>import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;<>

<cb>@GetMapping()
public ResponseEntity\<String> <v>testStringResponse<>() {
	return new ResponseEntity\<>("<v>This is the text response.<>", HttpStatus.OK);
}<>
@
@ HttpStatus, org.springframework.http.HttpStatus
@ HttpStatus.OK
@ ResponseEntity, org.springframework.http.ResponseEntity



#### Http Response Code - OK

<cb>HttpStatus.OK<>

Full Usage:

<cb>import org.springframework.http.HttpStatus;

public ResponseEntity\<<v>T<>> <v>action<>() {
    return new ResponseEntity\<<v>T<>>(<v>...<>, HttpStatus.OK);
}<>


Returns Http Code 200 / OK
@
@ HttpStatus, org.springframework.http.HttpStatus
@ HttpStatus.OK, OK, 200



#### Http Response Code - Internal Server Error

<cb>HttpStatus.INTERNAL_SERVER_ERROR<>

Full Usage:

<cb>import org.springframework.http.HttpStatus;

public ResponseEntity\<<v>T<>> <v>action<>() {
    return new ResponseEntity\<<v>T<>>(<v>...<>, HttpStatus.INTERNAL_SERVER_ERROR);
}<>


Returns Http Code 500 / Internal Server Error
@
@ HttpStatus, org.springframework.http.HttpStatus
@ HttpStatus.INTERNAL_SERVER_ERROR, INTERNAL_SERVER_ERROR, 500



#### Http Response Code - Bad Request

<cb>HttpStatus.BAD_REQUEST<>

Full Usage:

<cb>import org.springframework.http.HttpStatus;

public ResponseEntity\<<v>T<>> <v>action<>() {
    return new ResponseEntity\<<v>T<>>(<v>...<>, HttpStatus.BAD_REQUEST);
}<>


Returns Http Code 400 / Bad Request
@
@ HttpStatus, org.springframework.http.HttpStatus
@ HttpStatus.BAD_REQUEST, BAD_REQUEST, 400
@ validation



#### Http Response Code - Not Found

<cb>HttpStatus.NOT_FOUND<>

Full Usage:

<cb>import org.springframework.http.HttpStatus;

public ResponseEntity\<<v>T<>> <v>controllerAction<>() {
    return new ResponseEntity\<<v>T<>>(<v>...<>, HttpStatus.NOT_FOUND);
}<>
@
@ HttpStatus, org.springframework.http.HttpStatus
@ HttpStatus.NOT_FOUND, NOT_FOUND
@ validation



### Controller Response - String

<cb>public ResponseEntity\<String> <v>controllerAction<>() {
    <v>...<>
}<>

Full Usage:

<cb>import org.springframework.http.ResponseEntity;

public ResponseEntity\<String> <v>controllerAction<>() {
    <v>...<>
}<>


Example:

<cb>import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;<>

<cb>@GetMapping()
public ResponseEntity\<String> <v>testStringResponse<>() {
    return new ResponseEntity\<>("<v>This is the text response.<>", HttpStatus.OK);
}<>
@
@ ResponseEntity, org.springframework.http.ResponseEntity



# Conversion - JSON
@
@ Marshalling



### JSON - Property - Map To JSON Name

<cb>@JsonProperty("<v>json_name<>")<>

<cb>@JsonProperty("<v>json_name<>")
public void set<v>PropertyName<>(<v>Type<> value) {
	<v>...<><>

Import:

<cb>import com.fasterxml.jackson.annotation.JsonProperty;<>


Place before setter method.
Works for marshalling and unmarshalling.
@
@ Set



# Logging
@
@ log-only, logging-only


### Logging - Default Library

<cb>logback<>


Logback is the default logger but is managed using SLF4J APIs.



### Logging - Configuration File

Preferred:

<cb>logback-spring.xml<>

Acceptable:

<cb>logback.xml<>

Place in class path.
@
@ Settings, Properties


### Logging - Configuration Settings

In:

<cb>application.properties<>

<!>Get properties.<>
@
@ Settings, Properties



### Logging - Basics

<cb>public final static Logger logger = LogManager.getLogger(<v>ClassName<>.class);<>

Imports:

<cb>import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;<>



Example:

<cb>import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class <v>Component1<> {

	public final static Logger logger = LogManager.getLogger(<v>Component1<>.class);
}<>
@
@ Source Code, Example, Template



### Logging - Log Exception

<cb>logger.error(<v>message<>, <v>exception1<>);<>



# Repository
@
@ rep-only, repository-only, repositories-only



### Repository - Define

<cb>public interface <v>TargetClassRepository<> extends JpaRepository\<<v>TargetClass<>, <v>IdType<>>{

}<>
@
@ create, new



### Repository - Lock

<cb>@Lock(LockModeType.PESSIMISTIC_WRITE)
public <v>...<> <v>retrieveMethod<>() {
	<v>...<>
}<>


Apply to the method needing the lock.



### Repository - Query

<cb>public interface <v>TargetClassRepository<> 

	String <v>QUERY_STRING<> = "SELECT <v>item<> From <v>Item<> <v>item<> WHERE <v>property1<> = :<v>queryParam1<> <v>...<>";

	@Query(<v>QUERY_STRING<>)
	public List\<<v>Item<>> <v>retrieveMethod<>(@Param ("<v>queryParam1<>") <v>Type<> <v>parameter<>, <v>...<>);<>
@
@ Custom, Group By, Where



### Property - To DB String

<cb>@convert<>

<cb>@Convert(converter = <v>TypeConverter<>.class)
private <v>Type<> <v>property1<>;<>

Import:

<cb>import javax.persistence.Convert;<>

Converter:

<cb>public class <v>TypeConverter<> implements AttributeConverter\<<v>Type<>, String> {

	@Override
	public String convertToDatabaseColumn(<v>Type<> value) {

		return <v>toStringConvertion<>(value);
	}

	@Override
	public <v>Type<> convertToEntityAttribute(String value) {

		return <v>toTypeConversion<>(value);
	}
}<>

Import:

<cb>import javax.persistence.AttributeConverter;<>



## Query




## Transaction



## Transactiion



# Validations

DecimalMax
DecimalMin
Digits
Email
Future
FutureOrPresent
Max
Min
Negative
NegativeOrZero
NotBlank
NotEmpty
NotNull
Null
Past
PastOrPresent
Pattern
Positive
PositiveOrZero

Import:

<cb>import javax.validation.constraints.*;<>



# Entities


## Entity - Convert - Database Conversion



### Entity - Database - Attribute Type Converter

<cb><#>//Attribute:<>

\@convert(converter = <v>TypeConverter<>)
private <v>Type<> <v>attribute1<>;


<#>//Converter:<>

public class <v>TypeConverter<> implements AttributeConverter\<<v>AttributeType<>, String> {

    public String convertToDatabaseColumn (<v>Type<> value) {<v>...<>}
    public <v>Type<> convertToEntityAttribute (String value) {<v>...<>}
}<>

Usage:

<cb><#>// Entity Attribute:<>

import javax.persistence.Convert:

class <v>Entity1<> {

    \@convert(converter = <v>TypeConverter<>)
    private <v>Type<> <v>attribute1<>;
}<>

<cb><#>// Converter:<>

import javax.persistence.AttributeConverter;
import javax.persistence.Converter;

\@Converter(autoApply = true)
public class <v>TypeConverter<> implements AttributeConverter<ActionType, String> {

    \@Override
    public String convertToDatabaseColumn (<v>Type<> value) {
        return <v>...<>;
    }

    \@Override
    public <v>Type<> convertToEntityAttribute (String value) {
        return <v>...<>;
    }
}<>


Converts a class attribute to and from a string.

Used by the persistence framework to correctly convert data stored in a database.
Implement a converter by using <c>AttributeConverter<> and implementing it's 2 methods.
Then annotate the attribute with <c>@convert()<>
@
@ javax.persistence.Convert, convert(), converter=
@ javax.persistence.AttributeConverter, AttributeConverter\<>
@ convertToDatabaseColumn(), convertToEntityAttribute()
@ table, annotation
@ property, properties, field, fields, attribute, attributes



## Entity - Convert - JSON Conversion



### Entity - JSON - Unmarshal From JSON

<cb>@JsonCreator<>

Usage:

<cb>import com.fasterxml.jackson.annotation.JsonCreator;

\@JsonCreator
public static \<<v>Type<>> <v>fromJson<>(String <v>json<>) {
    return <v>...<>;
}<>


Converts a property string into its internal representation.

Typically used by the controller to convert incoming data.
Annotate the conversion method.
@
@ JsonCreator, \@JsonCreator, com.fasterxml.jackson.annotation.JsonCreator
@ convert, converting, conversion, string, controller, type



### Entity - JSON Attribute - Marshal To JSON

<cb>@JsonValue<>

Usage:

<cb>import com.fasterxml.jackson.annotation.JsonValue;

\@JsonValue
public String <v>toProperytString<>() {
    return <v>...<>;
}<>


Converts a value into it string / JSON form.

Typically used to return data to calling services.
Annotate the conversion method.
@
@ JsonValue, \@JsonValue, com.fasterxml.jackson.annotation.JsonValue
@ convert, converting, conversion, to string, controller
@ property, properties, field, fields, attribute, attributes



## Entity - Convert - String Conversion
@ 
@ conversion, converting, to, from



### Entity - Convert String to Entity

<cb>public class <v>StringToEntityConverter<> implements Converter\<String, <v>Entity<>> {
    public <v>Entity<> convert(String <v>value<>) {<v>...<>}
}<>

Usage:

<cb>import org.springframework.core.convert.converter.Converter;

public class <v>StringToEntityConverter<> implements Converter\<String, <v>Entity<>> {

    \@Override
    public <v>Entity<> convert(String <v>value<>) {
        return <v>...<>;
    }
}<>

Register Converter:

<cb>import org.springframework.context.annotation.Configuration;
import org.springframework.format.FormatterRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

\@Configuration
public class <v>ConverterConfiguration<> implements WebMvcConfigurer{
    
    \@Override
    public void addFormatters(FormatterRegistry registry) {
        
        registry.addConverter(new <v>StringToEntityConverter<>());
    }
}<>


Converts a string into an entity.

Create your conversion class by overriding <c>Convert<>.
Typically used by controllers to convert incoming requests.
@
@ converter\<>, com.fasterxml.jackson.databind.util.Converter
@ convert(), enum



### Entity - Convert Entity to String

<mark>Untested<>

<cb>public class <v>EntityToStringConverter<> implements Converter\<<v>Entity<>, String> {
    public String convert(<v>Entity<> <v>value<>) {<v>...<>}
}<>

Usage:

<cb>import org.springframework.core.convert.converter.Converter;

public class <v>EntityToStringConverter<> implements Converter\<<v>Entity<>, String> {

    \@Override
    public String convert(<v>Entity<> <v>value<>) {
        return <v>...<>;
    }
}<>

Register Converter:

<cb>import org.springframework.context.annotation.Configuration;
import org.springframework.format.FormatterRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

\@Configuration
public class <v>ConverterConfiguration<> implements WebMvcConfigurer{
    
    \@Override
    public void addFormatters(FormatterRegistry registry) {
        
        registry.addConverter(new <v>EntityToStringConverter<>());
    }
}<>


Converts an entity into a string

Create your conversion class by overriding <c>Convert<>.
Typically used by controllers to return results.
@
@ converter\<>, com.fasterxml.jackson.databind.util.Converter
@ convert(), enum



## Validation



# Build


## Build - Packages


### Package - Spring Boot

<cb>spring-boot-starter-web<>

Gradle:

<cb>compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '<v>version<>'<>


Maven Repository:
<l>https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web<>


Required for Spring Boot applications.
@
@ spring-boot-starter-web



### Package - Spring Boot Testing

<cb>spring-boot-starter-test<>

Gradle:

<cb>testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '<v>version<>'<>


Maven Repository:
<l>https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test<>


Required for Spring Boot applications.
@
@ spring-boot-starter-web



### Package - Spring Actuator

<cb>spring-boot-starter-actuator<>

Gradle:

<cb>compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '<v>version<>'<>


Maven Repository:
<l>https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator<>


#### Package - Spring Actuator - Configure

<c>application.properties<>:

<cb>management.endpoints.web.exposure.include=*<>



#### Package - Spring Actuator - Configure - Enable Shutdown By Url

<cb>management.endpoint.shutdown.enabled=true
endpoints.shutdown.enabled=true<>



#### Spring Actuator - Default Base Url

<cb>GET		https://<v>url<>/actuator<>



#### Spring Actuator - Application Health Url

<cb>GET		https://<v>url<>/actuator/health<>



#### Spring Actuator - Application Info Url

<cb>GET		https://<v>url<>/actuator/info<>



#### Spring Actuator - Set Base Urs

Add Application Property:

<cb>management.endpoints.web.base-path=<v>/new/base/path<><>
@
@ End Point, path



#### Spring Actuator - Shut Down Url

<cb>POST	https://<v>url<>/actuator/shutdown<>


Must be enabled.



#### Reference - End Point List

Official Documentation:
<l>https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints<>



# How To



### Application - Gradle - Compile

<cb>gradle build<>



### Application - Gradle - Run

<cb>gradle bootRun<>



### ApplicationContext - Get

<cb>ApplicationContext <cb>context<> = SpringApplication.run (<v>Application<>.class, args);<>




### Bean - Instance - Get

<cb>ApplicationContext <v>context<> = SpringApplication.run (<v>Application<>.class, args);

<v>Class1<> <v>item1<> = context.getBean("<v>ClassName<>");
<v>Class2<> <v>item2<> = context.getBean(<v>Class2<>.class);<>
@
@ In Code, Through, Programmatically



### Content Type - Set

On Controller Class (<!>controller method too?<>):

<c>text/html<>:

@RequestMapping(produces=MediaType.TEXT_HTML_VALUE)

<c>text/plain<>:

@RequestMapping(produces=MediaType.TEXT_PLAIN_VALUE)



### HTML

See: Static Content



### HTTPS - Enable

Create Keystore, Certificate

	See: Keytool.Help

Copy Keystore To Resources Folder

Configure Properties

<cb>server.port=8443

security.require-ssl=true
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:<v>keystore_file.p12<>
server.ssl.key-store-password=<v>keystore_password<>
server.ssl.key-alias=<v>keystore_alias<><>

Open

<cb><l>https://localhost:8443<><>



### Inject - Inheritance

Define Subclass:

<cb>@Qualifier ("<v>qualifier_name<>")
class <v>...<> implements <v>BaseType<> {
	<v>...<>
}<>


Inject Subclass:

<cb>@Inject
\@Qualifier ("<v>qualifier_name<>")
<v>BaseType<> <v>item1<>;<>
@
@ @Qualifier, @Qualified, Class, Subclass, Inheritance, Base Class



### Json - Convert From

<cb>@JsonValue<>


Example:

<cb>class <v>SomeClass<> {

\@JsonValue
public String <v>actualJsonValue<>;<>



### Json - Convert To

<cb>@JsonCreate<>


Example:

<cb>class <v>ConvertClass1<> {

\@JsonCreator
public static <v>TargetClass<> <v>convertMethod<> (String <v><!>json?-<>value<>) {
	<v>conversion code...<>
	return <v>convertedValue<>;
}<>



### JUnit 4 - Runner

<cb>import org.springframework.test.context.junit4.SpringJUnit4ClassRunner.SpringJUnit4ClassRunner;

\@RunWith(SpringJUnit4ClassRunner.class)<>
@
@ Unit Tests



### JUnit 5 - Runner

<cb>import org.springframework.test.context.junit.jupiter.SpringExtension;

\@ExtendWith(SpringExtension.class)<>
@
@ Unit Tests



Static Content - Directory

Preferred:

<cb>/public<>

Or					

<cb>/static<>

Do not use <c>/src/main/java<>.



### ServletContext - Get

<cb>@Autowired
ServletContext context;<>

Import: <!>Confirm<>

<cb>javax.servlet.ServletContext<>


Best Practices:

Use in component classes.
Do not reference from the main application class.



### Value Object - JPA - Declare As

<cb>@Embeddable<>

<cb>@Embeddable
public class <v>ValueObjectClass1<> {
	<v>...<>
}<>


Declares a class as a value object.



### Value Object - JPA - Embed In Parent

<cb>@Embedded<>

<cb>@Embedded
private <v>ValueObjectClass1<> <v>valueObject1<>;



### Value Object - JPA - Embed In Parent - As ID Object

<cb>@EmbeddedId<>

<cb>@EmbeddedId
private <v>ValueObjectClass1<> <v>valueObject1<>;<>
@
@ @EmbeddedId



### Value Object - Json - Embed

<cb>@JsonUnwrap
private <v>ValueObjectClass1<> <v>valueObject1<>;<>



### URLs - Log

Add Configuration Class:

<cb>import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.filter.CommonsRequestLoggingFilter;

\@Configuration
public class HttpRequestLoggerConfiguration {
	
	@Bean
	public CommonsRequestLoggingFilter requestLoggingFilter() {
		
		CommonsRequestLoggingFilter loggingFilter = new CommonsRequestLoggingFilter();
		
		loggingFilter.setIncludeClientInfo(true);
		loggingFilter.setIncludeQueryString(true);
		loggingFilter.setIncludePayload(true);

		return loggingFilter;
	}
}<>


Add Application Property (application.properties):

<cb>logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG<>

Add Application Property (application.yaml):

<cb>logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG<>


Or Add Log File Property <!>Untested<>:

<cb>\<logger name="org.springframework.web.filter.CommonsRequestLoggingFilter">
	\<level value="DEBUG" />
\</logger><>


<!>Note: Tried with <c>INFO<> instead of <!>DEBUG<>. Couldn't get it to work.<>
@
@ http Requests



### URLs - Log - Custom Class

Define Class:

<cb>import javax.servlet.http.HttpServletRequest;
import org.springframework.web.filter.AbstractRequestLoggingFilter;

import ua.core.utils.StringUtils;

public class <v>CustomRequestLoggingFilter<> extends AbstractRequestLoggingFilter {

    @Override
    protected void beforeRequest(HttpServletRequest request, String message) {

		if (isHealthCheck(request))
			return;

		this.logger.debug("Request: " + request.getMethod() + " " + request.getServletPath());
    }

	@Override
	protected void afterRequest(HttpServletRequest request, String message) {
		// Not logging after request completed.
	}
	
	private boolean isHealthCheck(HttpServletRequest request) {
		
		return request.getServletPath().equals("/health");
	}
}<>



Add Configuration Class:

<cb>import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import <v>package.path<>.<v>CustomRequestLoggingFilter<>;

\@Configuration
public class HttpRequestLoggerConfiguration {
	
	@Bean
	public <v>CustomRequestLoggingFilter<> requestLoggingFilter() {
		return new <v>CustomRequestLoggingFilter<>();
	}
}<>


Add Application Property (application.properties):

<cb>logging.level.org.<v>package.path<>.<v>CustomRequestLoggingFilter<>=DEBUG<>

Add Application Property (application.yaml):

<cb>logging.level.org.<v>package.path<>.<v>CustomRequestLoggingFilter<>: DEBUG<>


Or Add Log File Property <!>Untested<>:

<cb>\<logger name="<v>package.path<>.<v>CustomRequestLoggingFilter<>">
	\<level value="DEBUG" />
\</logger><>
@
@ http Requests



# Appendix - Annotations
@ Reference, Index


### @Autowired	

<cb>@Autowired<>

Full:

<cb>import org.springframework.beans.factory.annotation.Autowired;

\@Autowired
<v>...<><>

Don't Use. Prefer @Inject
Auto-inject the correct value on this variable.

On: Class Instance Variables



### @Bean

<cb>@Bean<>

Declares a bean. Must be added to the method that generates the bean. Spring executes the method and register's the return value as a bean. By default the bean name is the same as the method.
Direct analog of the XML <bean/> element.

On: Method



### @Component

<cb>@Component<>

Defines a class to be managed by Spring.



### @ComponentScan

<cb>@ComponentScan<>

Tells Spring to look in this package for other Spring components, configurations and servlets.

On: Class



### @Configuration

<cb>@Configuration<>

Tags the class as a source of bean definitions for the application context.

On: Class



### @Controller

<cb>@Controller<>



### @EnableWebMvc

<cb>@EnableWebMvc<>

Flags the application as a web application.
It also activates key behaviours such as setting up a DispatcherServlet.

On: Class



### @Inject

<cb>@Inject<>

Full Usage:

<cb>import javax.inject.Inject;

\@Inject
<v>...<><>

Auto-inject the correct value on this variable.

On: Class Instance Variables



### @Qualifier

<cb>@Qualifier ("<v>qualifier_name<>")<>

Full

<cb>import org.springframework.beans.factory.annotation.Qualifier;

\@Qualifier ("<v>qualifier_name<>")<>

Define:

<cb>@Qualifier ("<v>qualifier_name<>")
class <v>ImplementingClass<><>

Use:

<cb>@Inject
\@Qualifier ("<v>qualifier_name<>")
<v>classProperty<><>


<cb>@Inject
\@Qualifier ("<v>qualifier_name<>") <v>methodParameter<><>



### @Repository

<cb>@Repository<>

Extents @Component. Don't know what extras it includes. Maybe only to denote the component as a DA or repository component.



### @RestController

<cb>@RestController<>

Defines a controller that returns raw data instead of a view.

On: Class

Equivalent to:

<cb>@Controller
\@ResponseBody<>



### @Service

<cb>@Service<>


Same as @Component. Used only to denote the component as a service component to the developer.



### @SpringBootApplication

<cb>@SpringBootApplication<>


Convenience annotation combining the following:

<cb>@ComponentScan
\@Configuration
\@EnableAutoConfiguration
\@EnableWebMvc				<#>// 1<><>

On: Class


1  -  If also has spring-webmvc in class path.



### @SpringBootContext

<cb>@SpringBootContext<>


Create the whole application context before running.

On: Class



### @Value

<cb>@Value<>


Read property.



### @WebMvcTest

<cb>@WebMvcTest<>


Create just the web layers of the application (as opposed to @SpringBootContext).

On: Class



# Reference - Gradle



# Reference - Configuration Settings
@
@ Properties, application.properties, Set



### Server - Compress Responses

<cb>server.compression.enabled=true
server.compression.min-response-size=1<>


Enables server side compression.
Responses are compressed with gzip


<c>server.compression.enabled<>:
Enables compression.

<c>server.compression.min-response-size<>:
Sets the minimum size before compressing the reply.


Content Types That Are Compressed:

<cb>text/css
text/html
text/json
text/plain<>
@
@ server.compression.enabled, compression.enabled
@ server.compression.min-response-size, compression.min-response-size, min-response-size
@ enable, gzip, compression



### Server - Port

<cb>server.port = <v>port_number<><>
@
@ server.port



### Sql - Log

<cb>spring.jpa.show-sql = true<>
@
@ spring.jpa.show-sql, jpa.show-sql, show-sql
@ Show, Display, Print



# Glossary



## Acronyms



### IoC
Inversion of Control



### MVC
Model View Controller



## Terms



### ApplicationContext
The Spring class that maintains all the Spring beans/components.

This is a container that extends BeanFactory (supports Spring dependency injection, etc.). It adds some bells and whistles. It supports application events. (The name is a bit of a misnomer)

Spring provides 3 implementations:

- FileSystemXMLApplicationContext
- ClassPathXmlApplicationContex
- WebXmlApplicationContex
@
@ Application Context, Spring Context



### Bean
Beans are any java objects (POJO classes) that are created by the spring framework.

These are created and maintained by ApplicationContext
@
@ Spring Bean



### BeanFactory
This is Springs base dependency injection container. It creates and instantiates beans with all the dependennt canfigurations. It also supports init-method and destroy-method settings. Spring supplies different implementations of this class. The most common is XmlBeanFactory which creates and configures beans from an XML File. This type is usually prefered on devices with limited resources (such as mobile phones).



### Component
Declares a class as a Spring bean, something to be instantiated and injected somewhere else. Spring scans all classes for @Component and registers them at startup.
Annotation: @Component



### Component - Controller
Specialized component / Spring bean that it is a Web MVC controller and users web-specific tools and functions. DispatchServlet searches for @Controller classes and registers their @RequestMapping methods.
Annotation: @Controller



### Component - Repository
Specialized component used for persistence.
Annotation: @Repository



### Component - Service
Denotes a component to be used for external services. Doesn't add any real functionality to the standard @Component.
Annotation: @Serice



### Container
A pool of beans created in memory. The container has an api to query the pool.



### DispatcherServlet
The Spring class that maps Http requests to Spring controller classes.

It takes incoming URIs and connects them to the correct handlers (controller methods) and views (generally JSPs).
@
@ Dispatcher Servlet


### Namespace
As in the namespace 'test' in '/WEB-INF/test-servlet.xml'.
This refers to the scope of an instance of Spring's DispatcherServlet. If the namespace is called test, spring looks for a file test-servlet.xml to as that dispatcher's context. This dispatch context will become a child of the root context.



### Prototype
Objects defined as prototypes create new instances every time one is requested. Prototype objects are lazy loaded.
See also Singleton.



### Repository Classes
CrudRepository, JpaRepository, PagingAndSortingRepository



### Repository - CrudRepository
Provides mainly CRUD functions.



### Repository - JpaRepository
Provides some JPA-related methods such as flushing the persistence context, deleting records in a batch, query by example.
Extends: CrudRepository, PagingAndSortingRepository.



### Repository - RepositoryPagingAndSortingRepository
Provides methods to do pagination and sorting records.
Extends: CrudRepository



### Service
A class that uses spring for dependency injection.



### Singleton
Objects that are singletons are created once at the beginning of runtime. Only one instance of each object is created.
See also Prototype.



### Spring Boot
A framework that allows applications to get up and running fast. It is an opinionated framework containing other Spring frameworks and an embedded tomcat container (by default).

Doesn't generate code. Instead dynamically wires up beans and settings. Applies them to the application context.

Dependency: spring-boot-starter-web

Includes:	spring-boot-starter
			spring-core
			spring-mvc
			spring-boot-starter-tomcat
			jackson.



### Spring Boot - Features
Servlet container (embedded Tomcat or Jetty)
Spring MVC standard beans if applicable (included automatically)
Unified deployable jar (includes all jar dependencies)



### Spring Boot Actuator
Provides some managed services such as health, audits, beans, and more.

<c>GET <v>url<>/actuator/health<>
<c>POST <v>url<>/actuator/shutdown<>



### Spring MVC
This is primarily about the controller side of MVC. Controller classes  DispatchServlet.
Dependency: spring-webmvc



### Spring Thymeleaf
This is a templating framework typically used to generate views in Spring MVC applications.


